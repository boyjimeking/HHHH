/* *  ScriptCommon.mm *  DragonDrive * *  Created by jhzheng on 12-1-9. *  Copyright 2012 __MyCompanyName__. All rights reserved. * */#include "ScriptCommon.h"#include "ScriptInc.h"#include "NDPath.h"#include "NDUtility.h"#include <sstream>#include <map>#include "NDPicture.h"#include "CCTextureCacheExt.h"using namespace LuaPlus;namespace NDEngine {int LuaLogInfo(LuaState* state){	LuaStack args(state);	LuaObject str = args[1];		if (str.IsString())	{                        		ScriptMgrObj.DebugOutPut("%s", str.GetString());	}		return 0;}int LuaLogError(LuaState* state){	LuaStack args(state);	LuaObject str = args[1];		if (str.IsString())	{		ScriptMgrObj.DebugOutPut("Error:%s", str.GetString());	}		return 0;}int DoFile(LuaState* state){	LuaStack args(state);	LuaObject str = args[1];		if (str.IsString())	{        //NDLog( [NSString stringWithUTF8String: NDPath::GetScriptPath(str.GetString())]);        /*HJQ MOD*/#ifndef UPDATE_RES		state->DoFile(NDPath::GetScriptPath(str.GetString()));#else        ScriptMgrObj.LoadLuaFile(NDPath::GetScriptPath(str.GetString()));#endif	}		return 0;}	int LeftShift(int x, int y){	return x<<y;}		int RightShift(int x, int y){	return x>>y;}	int BitwiseAnd(int x, int y){	int nRes = x&y;	return nRes;}std::map<std::string, double> debug_str_double;void PerformTestBegin(const char* tip){	if (!tip)	{		NDAsssert(0);	}	debug_str_double[std::string(tip)]	= 0.0f;	debug_str_double[std::string(tip)]	= [NSDate timeIntervalSinceReferenceDate];}void PerformTestEnd(const char* tip){	double dPerformEnd							= [NSDate timeIntervalSinceReferenceDate];	if (!tip)	{		NDAsssert(0);	}	std::map<std::string, double>::iterator it	= debug_str_double.find(std::string(tip));	if (debug_str_double.end() == it)	{		NDAsssert(0);	}	printf("\n[%s] cost [%f]\n", tip, dPerformEnd - it->second);	debug_str_double.erase(it);}int PicMemoryUsingLogOut(bool bNotPrintLog){	int nSize = 0;	if (!bNotPrintLog)	{		NSLog(@"\n============NDPicturePool Memory Report==============\n");	}	nSize += NDPicturePool::DefaultPool()->Statistics(bNotPrintLog);	if (!bNotPrintLog)	{		NSLog(@"\n============CCTextureCache Memory Report==============\n");	}	nSize += [[CCTextureCache sharedTextureCache] Statistics:bNotPrintLog];	return nSize;}    //////////////////////////////////////////////////////////////std::string g_strTmpWords;////////////////////////////////////////////////////////////void ScriptCommonLoad(){	ETLUAFUNC("LuaLogInfo", LuaLogInfo);		ETLUAFUNC("LuaLogError", LuaLogError);		ETLUAFUNC("DoFile", DoFile);		ETCFUNC("LeftShift", LeftShift)		ETCFUNC("RightShift", RightShift)		ETCFUNC("BitwiseAnd", BitwiseAnd)	ETCFUNC("PerformTestBegin", PerformTestBegin)	ETCFUNC("PerformTestEnd", PerformTestEnd)    //ETCFUNC("GetRandomWords", GetRandomWords);	ETCFUNC("PicMemoryUsingLogOut", PicMemoryUsingLogOut);}}