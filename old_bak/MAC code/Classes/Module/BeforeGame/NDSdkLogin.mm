/* *  NDSdkLogin.mm *  DragonDrive * *  Created by jhzheng on 11-11-14. *  Copyright 2011 __MyCompanyName__. All rights reserved. * */#import "NDSdkLogin.h"#import "ScriptGlobalEvent.h"#ifdef USE_NDSDK#import <NdComPlatform/NdComPlatform.h>#import <NdComPlatform/NdCPNotifications.h>#endif#import "SMLoginScene.h"#import "SMGameScene.h"#import "ND91SDKViewController.h"#import "NDBeforeGameMgr.h"@interface NDSdkLogin (hidden)- (void)SNSLoginCallBackRegister;- (void)SNSLoginResult:(NSNotification *)notify;@end@implementation NDSdkLogin- (id)init{	if ((self = [super init])) 	{		[self SNSLoginCallBackRegister];	}	return self;}- (void)dealloc{#ifdef USE_NDSDK	[[NSNotificationCenter defaultCenter] removeObserver:self];#endif			[super dealloc];}- (void)LoginWithUser{#ifdef USE_NDSDK	//[[NdComPlatform defaultPlatform] NdSetScreenOrientation:UIInterfaceOrientationLandscapeRight];	//[[NdComPlatform defaultPlatform] NdSetScreenOrientation:UIInterfaceOrientationLandscapeLeft];//    NDEngine::NDDirector* director = NDEngine::NDDirector::DefaultDirector();//    UIWindow* win = director->GetWindow();//    if(win.rootViewController != nil) {//        return;//    }//    ND91SDKViewController* pND91SDKView = [ND91SDKViewController sharedViewController];//    win.rootViewController = pND91SDKView;//    win.backgroundColor = [UIColor whiteColor];    [[NdComPlatform defaultPlatform] NdSetScreenOrientation:UIInterfaceOrientationPortrait];	[[NdComPlatform defaultPlatform] NdLoginEx:0];#endif}- (void)LoginWith{#ifdef USE_NDSDK	//[[NdComPlatform defaultPlatform] NdSetScreenOrientation:UIInterfaceOrientationLandscapeRight];	//[[NdComPlatform defaultPlatform] NdSetScreenOrientation:UIInterfaceOrientationLandscapeLeft];    [[NdComPlatform defaultPlatform] NdSetScreenOrientation:UIInterfaceOrientationPortrait];	[[NdComPlatform defaultPlatform] NdSwitchAccount];#endif}- (void)SNSLoginCallBackRegister{#ifdef USE_NDSDK    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(SNSLoginResult:) name:(NSString *)kNdCPLoginNotification object:nil];#endif}- (void)SNSLoginResult:(NSNotification *)notify{#ifdef USE_NDSDK    NSDictionary *dict = [notify userInfo];    BOOL success = [[dict objectForKey:@"result"] boolValue];    NdGuestAccountStatus* guestStatus = (NdGuestAccountStatus*)[dict objectForKey:@"NdGuestAccountStatus"];         //登录成功后处理    if([[NdComPlatform defaultPlatform] isLogined] && success) { //也可以通过[[NdComPlatform defaultPlatform] getCurrentLoginState]判断是否游客登录状态        NSString* uin = [[NdComPlatform defaultPlatform] loginUin];        NSString* nickName = [[NdComPlatform defaultPlatform] nickName];        NDBeforeGameMgr& mgr = NDBeforeGameMgrObj;        mgr.SetCurrentUser([uin intValue]);        if (guestStatus) {            if ([guestStatus isGuestLogined]) {                //游客账号登录成功;                 //ScriptGlobalEvent::OnEvent(GE_LOGINOK_GUEST, [uin intValue]);                CSMGameScene * pGameScene = (CSMGameScene *)NDDirector::DefaultDirector()->GetSceneByTag(SMGAMESCENE_TAG);                if ( pGameScene )                {                    ScriptMgrObj.excuteLuaFunc( "SetAccoundID", "Login_ServerUI", [uin intValue] );                    quitGame();                    return;                }				CSMLoginScene* pScene = (CSMLoginScene*)NDDirector::DefaultDirector()->GetSceneByTag(SMLOGINSCENE_TAG);				if(pScene)				{                    if( pScene->GetChild( 2068 ) )//Login_ServerUI                    {                        ScriptMgrObj.excuteLuaFunc( "LoginOK_Normal", "Login_ServerUI", [uin intValue] );                        return;                    }                    else						return pScene->OnEvent_LoginOKGuest([uin intValue]);				}            }            else if ([guestStatus isGuestRegistered]) {                 //游客成功注册为普通账号                //ScriptGlobalEvent::OnEvent(GE_LOGINOK_GUEST2NORMAL, [uin intValue]);                CSMGameScene * pGameScene = (CSMGameScene *)NDDirector::DefaultDirector()->GetSceneByTag(SMGAMESCENE_TAG);                if ( pGameScene )                {                    ScriptMgrObj.excuteLuaFunc( "SetAccountID", "Login_ServerUI", [uin intValue] );                    quitGame();                    return;                }				CSMLoginScene* pScene = (CSMLoginScene*)NDDirector::DefaultDirector()->GetSceneByTag(SMLOGINSCENE_TAG);				if(pScene)				{                    if( pScene->GetChild( 2068 ) )//Login_ServerUI                    {                        ScriptMgrObj.excuteLuaFunc( "LoginOK_Normal", "Login_ServerUI", [uin intValue] );                        return;                    }                    else						return pScene->OnEvent_LoginOKGuest([uin intValue]);				}            }         }        else {            //普通账号登录成功!            //ScriptGlobalEvent::OnEvent(GE_LOGINOK_NORMAL, [uin intValue]);                CSMGameScene * pGameScene = (CSMGameScene *)NDDirector::DefaultDirector()->GetSceneByTag(SMGAMESCENE_TAG);            if ( pGameScene )            {                ScriptMgrObj.excuteLuaFunc( "SetAccountID", "Login_ServerUI", [uin intValue] );                quitGame();                return;            }			CSMLoginScene* pScene = (CSMLoginScene*)NDDirector::DefaultDirector()->GetSceneByTag(SMLOGINSCENE_TAG);			if(pScene)			{                if( pScene->GetChild( 2068 ) )//Login_ServerUI                {                    ScriptMgrObj.excuteLuaFunc( "LoginOK_Normal", "Login_ServerUI", [uin intValue] );                    return;                }                else					return pScene->OnEvent_LoginOKGuest([uin intValue]);			}        }     }    //登录失败处理和相应提示    else {        int error = [[dict objectForKey:@"error"] intValue];        NSString* strTip = [NSString stringWithFormat:@"登录失败, error=%d", error];        switch (error) {            case ND_COM_PLATFORM_ERROR_USER_CANCEL://用户取消登录                if (([[NdComPlatform defaultPlatform] getCurrentLoginState] == ND_LOGIN_STATE_GUEST_LOGIN)) {                    strTip = @"当前仍处于游客登录状态"; }                else {                    strTip = @"用户未登录";                }                 break;            case ND_COM_PLATFORM_ERROR_APP_KEY_INVALID://appId未授权接入, 或 appKey 无效                strTip = @"登录失败, 请检查appId/appKey";                 break;            case ND_COM_PLATFORM_ERROR_CLIENT_APP_ID_INVALID://无效的应用ID strTip = @"登录失败, 无效的应用ID";                break;            case ND_COM_PLATFORM_ERROR_HAS_ASSOCIATE_91:                strTip = @"有关联的91账号,不能以游客方式登录";                 break;            default:                 //其他类型的错误提示                break;         }        //ScriptGlobalEvent::OnEvent(GE_LOGINERROR, error);        CSMLoginScene* pScene = (CSMLoginScene*)NDDirector::DefaultDirector()->GetSceneByTag(SMLOGINSCENE_TAG);        if(pScene)        {          return pScene->OnEvent_LoginError(error);        }    } #endif}@end