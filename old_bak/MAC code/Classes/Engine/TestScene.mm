/* *  TestScene.mm *  DragonDrive * *  Created by jhzheng on 11-7-30. *  Copyright 2011 __MyCompanyName__. All rights reserved. * */#include "TestScene.h"#include "NDDirector.h"#include "CGPointExtension.h"#include "ItemImage.h"#include "cpLog.h"#include "GameNewItemBag.h"IMPLEMENT_CLASS(TestScene, NDScene)TestScene* TestScene::Scene(){	TestScene *scene = new TestScene;		scene->Initialization();		return scene;}TestScene::TestScene(){	m_menuLayer = NULL;		m_buttonLayer = NULL;		m_btn1 = NULL;		m_btn2 = NULL;		m_buttonLayer2 = NULL;		m_btn3 = NULL;		m_btn4 = NULL;		m_fighterBottom = NULL;		m_fighterLeft = NULL;		m_fighterRight = NULL;}TestScene::~TestScene(){}void TestScene::Initialization(){	NDScene::Initialization();			CGSize winsize = NDDirector::DefaultDirector()->GetWinSize();		m_menuLayer = new NDUIMenuLayer();	m_menuLayer->Initialization();	m_menuLayer->SetDelegate(this);	m_menuLayer->SetScrollEnabled(true);	this->AddChild(m_menuLayer);		if ( m_menuLayer->GetCancelBtn() ) 	{		m_menuLayer->GetCancelBtn()->SetDelegate(this);	}		std::vector<Item*> itemlist;		NewGameItemBag *bag = new NewGameItemBag;		bag->Initialization(itemlist);		bag->SetFrameRect(CGRectMake(203, 31, NEW_ITEM_BAG_W, NEW_ITEM_BAG_H));		bag->SetPageCount(4);		m_menuLayer->AddChild(bag);		/*		int xStart = (winsize.width-200*2-20)/2;		int yStart = (winsize.width-m_menuLayer->GetOperationHeight()-m_menuLayer->GetTitleHeight()-200-20)/2-m_menuLayer->GetTitleHeight();		m_buttonLayer = new NDUILayer;	m_buttonLayer->Initialization();	m_buttonLayer->SetBackgroundColor(ccc4(255, 255, 255, 255));	m_buttonLayer->SetFrameRect(CGRectMake(xStart, yStart, 200, 200));	m_buttonLayer->SetDelegate(this);	m_buttonLayer->SetScrollEnabled(true);	m_menuLayer->AddChild(m_buttonLayer);		xStart += 220;		m_buttonLayer2 = new NDUILayer;	m_buttonLayer2->Initialization();	m_buttonLayer2->SetBackgroundColor(ccc4(0, 0, 0, 255));	m_buttonLayer2->SetFrameRect(CGRectMake(100, 100, 100, 100));	m_buttonLayer2->SetDelegate(this);	m_buttonLayer2->SetScrollEnabled(true);	m_buttonLayer->AddChild(m_buttonLayer2);		m_buttonLayer3 = new NDUILayer;	m_buttonLayer3->Initialization();	m_buttonLayer3->SetBackgroundColor(ccc4(0, 0, 0, 255));	m_buttonLayer3->SetFrameRect(CGRectMake(0, 0, 100, 100));	m_buttonLayer3->SetDelegate(this);	m_buttonLayer3->SetScrollEnabled(true);	m_buttonLayer->AddChild(m_buttonLayer3);		m_btn1 = new NDUIButton;	m_btn1->Initialization();	m_btn1->SetFrameRect(CGRectMake(10, 10, 40, 40));	m_btn1->SetDelegate(this);	m_btn1->SetTitle("按钮1");	m_btn1->SetImage(ItemImage::GetItem(0,true), false, CGRectZero, true);	m_btn1->EnalbeGray(true);	m_btn1->SetDelegate(this);	m_buttonLayer3->AddChild(m_btn1);		m_btn2 = new NDUIButton;	m_btn2->Initialization();	m_btn2->SetFrameRect(CGRectMake(60, 10, 40, 40));	m_btn2->SetDelegate(this);	m_btn2->SetTitle("按钮2");	m_buttonLayer3->AddChild(m_btn2);		m_btn3 = new NDUIButton;	m_btn3->Initialization();	m_btn3->SetFrameRect(CGRectMake(10, 10, 40, 40));	m_btn3->SetDelegate(this);	m_btn3->SetTitle("按钮3");	m_buttonLayer2->AddChild(m_btn3);		m_btn4 = new NDUIButton;	m_btn4->Initialization();	m_btn4->SetFrameRect(CGRectMake(60, 10, 40, 40));	m_btn4->SetDelegate(this);	m_btn4->SetTitle("按钮4");	m_buttonLayer2->AddChild(m_btn4);			m_fighterBottom = new FighterBottom;	m_fighterBottom->Initialization();	m_fighterBottom->SetDelegate(this);	SpeedBarInfo speedbarBottom;	for (int i = 0; i < 12; i++) {		speedbarBottom.push_back(SpeedBarCellInfo());		SpeedBarCellInfo& cellinfo = speedbarBottom.back();		cellinfo.background = ItemImage::GetItem(i);	}	m_fighterBottom->refresh(speedbarBottom);	this->AddChild(m_fighterBottom);		m_fighterLeft = new FighterLeft;	m_fighterLeft->Initialization();	m_fighterLeft->SetDelegate(this);	SpeedBarInfo speedbarLeft;	for (int i = 0; i < 12; i++) {		speedbarLeft.push_back(SpeedBarCellInfo());		SpeedBarCellInfo& cellinfo = speedbarLeft.back();		cellinfo.background = ItemImage::GetItem(i);	}	m_fighterLeft->refresh(speedbarLeft);	this->AddChild(m_fighterLeft);		m_fighterRight = new FighterRight;	m_fighterRight->SetDelegate(this);	m_fighterRight->Initialization();	SpeedBarInfo speedbarRight;	for (int i = 0; i < 12; i++) {		speedbarRight.push_back(SpeedBarCellInfo());		SpeedBarCellInfo& cellinfo = speedbarRight.back();		cellinfo.background = ItemImage::GetItem(i);	}	m_fighterRight->refresh(speedbarRight);	this->AddChild(m_fighterRight);		*/}	void TestScene::OnNDUISpeedBarEvent(NDUISpeedBar* speedbar, const SpeedBarCellInfo& info, bool longTouch){	if (speedbar == m_fighterLeft) 	{			}	else if (speedbar == m_fighterRight) 	{			}	else if (speedbar == m_fighterBottom) 	{			}		if(speedbar != m_fighterLeft)	{		m_fighterLeft->defocus();	}		if(speedbar != m_fighterRight)	{		m_fighterRight->defocus();	}		if(speedbar != m_fighterBottom)	{		m_fighterBottom->defocus();	}}void TestScene::OnNDUISpeedBarSet(NDUISpeedBar* speedbar){	if (speedbar == m_fighterLeft) 	{			}	else if (speedbar == m_fighterRight) 	{			}	else if (speedbar == m_fighterBottom) 	{			}}bool TestScene::OnLayerMove(NDUILayer* uiLayer, UILayerMove move, float distance){	if (m_buttonLayer == uiLayer) 	{		cpLog(LOG_INFO, "button layer1 move");				return true;	}	else if (m_buttonLayer2 == uiLayer) 	{		cpLog(LOG_INFO, "button layer2 move");				return true;	}	else if (m_menuLayer == uiLayer) 	{		cpLog(LOG_INFO, "bg layer move");				return true;	}	return false;}void TestScene::OnButtonClick(NDUIButton* button){	//static CGPoint pos = m_btn1->GetFrameRect().origin;	static int key = m_curUiAnimation.GetAnimationKey(m_btn1, CGSizeMake(20, 20));	if (button == m_btn1) 	{		cpLog(LOG_INFO, "button1 click");	}	else if (button == m_btn2) 	{		m_fighterBottom->SetGray(true);		cpLog(LOG_INFO, "button2 click");	}	else if (button == m_btn3) 	{		m_fighterBottom->SetGray(false);		return;		// down		SpeedBarInfo speedbarBottom;		for (int i = 5; i < 12; i++) {			speedbarBottom.push_back(SpeedBarCellInfo());			SpeedBarCellInfo& cellinfo = speedbarBottom.back();			cellinfo.background = ItemImage::GetItem(i);		}		m_fighterBottom->refresh(speedbarBottom);		return;				m_curUiAnimation.AddAnimation(									  key,									  UIAnimationMoveRightToLeft,									  0.3f									  );		/*		m_curUiAnimation.AddAnimation(				key,				pos,				ccp(pos.x, pos.y+20.0f),				1.0f			);		m_curUiAnimation.AddAnimation(									  key,									  ccp(pos.x, pos.y+20.0f),									  pos,									  1.0f									  );		*/		m_curUiAnimation.playerAnimation(key);						cpLog(LOG_INFO, "button3 click");	}	else if (button == m_btn4) 	{		// up				/*		m_curUiAnimation.AddAnimation(									  key,									  pos,									  ccp(pos.x, pos.y),									  1.0f									  );		m_curUiAnimation.playerAnimation(key);		*/		m_fighterBottom->SetGray(true, 2);		return;		SpeedBarInfo speedbarBottom;		for (int i = 12; i < 16; i++) {			speedbarBottom.push_back(SpeedBarCellInfo());			SpeedBarCellInfo& cellinfo = speedbarBottom.back();			if (i == 13) {				cellinfo.index = 7;			}			if (i == 14) {				cellinfo.index = 13;			}			cellinfo.background = ItemImage::GetItem(i);		}		m_fighterBottom->refresh(speedbarBottom);				return;				m_curUiAnimation.AddAnimation(									  key,									  UIAnimationMoveLeftToRight,									  0.3f									  );		m_curUiAnimation.playerAnimation(key);									  		cpLog(LOG_INFO, "button4 click");	}}void TestScene::OnButtonDown(NDUIButton* button){	if (button == m_btn1) 	{		cpLog(LOG_INFO, "button1 down");	}	else if (button == m_btn2) 	{		cpLog(LOG_INFO, "button2 down");	}	else if (button == m_btn3) 	{		cpLog(LOG_INFO, "button3 down");	}	else if (button == m_btn4) 	{		cpLog(LOG_INFO, "button4 down");	}}void TestScene::OnButtonUp(NDUIButton* button){	if (button == m_btn1) 	{		cpLog(LOG_INFO, "button1 up");	}	else if (button == m_btn2) 	{		cpLog(LOG_INFO, "button2 up");	}	else if (button == m_btn3) 	{		cpLog(LOG_INFO, "button3 up");	}	else if (button == m_btn4) 	{		cpLog(LOG_INFO, "button4 up");	}}bool TestScene::OnButtonLongClick(NDUIButton* button){	if (button == m_btn1) 	{		cpLog(LOG_INFO, "button1 long click");				return true;	}	else if (button == m_btn2) 	{		cpLog(LOG_INFO, "button2 long click");				return true;	}	else if (button == m_btn3) 	{		cpLog(LOG_INFO, "button3 long click");				return true;	}	else if (button == m_btn4) 	{		cpLog(LOG_INFO, "button4 long click");				return true;	}		return false;}bool TestScene::OnButtonDragOut(NDUIButton* button, bool longTouch){	if (button == m_btn1) 	{		cpLog(LOG_INFO, "button1 Drag Out %s touch", (longTouch ? "long" : "short"));				return true;	}	else if (button == m_btn2) 	{		cpLog(LOG_INFO, "button2 Drag Out %s touch", (longTouch ? "long" : "short"));				return true;	}	else if (button == m_btn3) 	{		cpLog(LOG_INFO, "button3 Drag Out %s touch", (longTouch ? "long" : "short"));				return true;	}	else if (button == m_btn4) 	{		cpLog(LOG_INFO, "button4 Drag Out %s touch", (longTouch ? "long" : "short"));				return true;	}		return false;}bool TestScene::OnButtonDragOutComplete(NDUIButton* button, bool outOfRange){	if (button == m_btn1) 	{		cpLog(LOG_INFO, "button1 Drag Out Complete is %s in range", (outOfRange ? "not" : ""));				return true;	}	else if (button == m_btn2) 	{		cpLog(LOG_INFO, "button2 Drag Out Complete is %s in range", (outOfRange ? "not" : ""));				return true;	}	else if (button == m_btn3) 	{		cpLog(LOG_INFO, "button3 Drag Out Complete is %s in range", (outOfRange ? "not" : ""));				return true;	}	else if (button == m_btn4) 	{		cpLog(LOG_INFO, "button4 Drag Out Complete is %s in range", (outOfRange ? "not" : ""));				return true;	}		return false;}bool TestScene::OnButtonDragIn(NDUIButton* button, NDUINode *uiNode, bool longTouch){	if (button == m_btn1) 	{		cpLog(LOG_INFO, "button1 Drag In %s", (longTouch ? "long" : "short"));				return true;	}	else if (button == m_btn2) 	{		cpLog(LOG_INFO, "button2 Drag In %s", (longTouch ? "long" : "short"));				return true;	}	else if (button == m_btn3) 	{		cpLog(LOG_INFO, "button3 Drag In %s", (longTouch ? "long" : "short"));				return true;	}	else if (button == m_btn4) 	{		cpLog(LOG_INFO, "button4 Drag In %s", (longTouch ? "long" : "short"));		return true;	}		return false;}